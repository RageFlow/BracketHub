
<div class="header-container">
    @* PC *@
    <div class="nav-container" device-type="PC">

        <div class="nav-title">
            <a class="title-logo" href="">
                <span>Bracket</span>
                <span>Hub</span>
            </a>
        </div>

        <nav>
            @if (CheckUrl())
            {
                <div class="nav-item">
                    <NavLink class="nav-link" href="@GameUrl" title="@GameService.Game?.Name">
                        <object data="@ImageStatics.IconUrl(GameService.Type)" type="image/png">
                            <img src="images/icons/default-icon.jpg" alt="">
                        </object>
                        @* @GameService.Type *@
                    </NavLink>
                </div>
            }
            <div class="nav-item">
                <NavLink class="nav-link" href="games">
                    Games
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="">
                    Popular
                </NavLink>
            </div>
        </nav>

        <div class="nav-functions">
            <SearchComponent Placeholder="Search for a game or tournament" ValueEntered="Search" />

            <button @onclick="Login">Login</button>
        </div>
    </div>

    @* Mobile *@
    <div class="nav-container" device-type="Mobile">
        <nav>
            <button title="Navigation menu" class="nav-item" @onclick="ToggleNavMenu">
                <i class="fa-solid fa-bars"></i>
            </button>
        </nav>

        <div class="nav-title">
            <a class="title-logo" href="">
                <span>Bracket</span>
                <span>Hub</span>
            </a>
        </div>

        <div class="nav-functions">
            <button>
                <i class="fa-solid fa-magnifying-glass"></i>
            </button>

            <button @onclick="Login">
                <i class="fa-solid fa-user"></i>
            </button>
        </div>
    </div>
</div>

@if (mobileMenuInitialized)
{
    @* Mobile menu blocker *@
    <div class="@NavMenuCssClass nav-mobile-menu-blocker" device-type="Mobile" @onclick="ToggleNavMenu"></div>

    @* Mobile inner menu *@
    <div class="@NavMenuCssClass nav-mobile-menu" device-type="Mobile">

        <div class="nav-title">
            <a class="title-logo" href="">
                <span>Bracket</span>
                <span>Hub</span>
            </a>
            <button @onclick="ToggleNavMenu">
                <i class="fa-solid fa-x"></i>
            </button>
        </div>

        <nav>
            <div class="nav-item" @onclick="ToggleNavMenu">
                <NavLink class="nav-link" href="games">
                    Games
                </NavLink>
            </div>
            <div class="nav-item" @onclick="ToggleNavMenu">
                <NavLink class="nav-link" href="">
                    Popular
                </NavLink>
            </div>
        </nav>
    </div>
}

@code {
    #region
    protected override void OnInitialized()
    {
        GameService.ThrowIfNull();
        GameService.ValuesChanged += Checktypes;
        Checktypes(this, GameService.Type);

        base.OnInitialized();
    }

    private void Checktypes(object? sender, string? value)
    {
        StateHasChanged();
    }
    #endregion

    #region Menu
    private bool mobileMenuInitialized = false;

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private Task? checkTask = null;

    private async Task ToggleNavMenu()
    {
        if (checkTask == null)
        {
            if (!mobileMenuInitialized)
                mobileMenuInitialized = true;

            collapseNavMenu = !collapseNavMenu;
            checkTask = CheckMenu();
            await checkTask;
        }
    }
    private async Task CheckMenu()
    {
        await Task.Delay(200);
        if (collapseNavMenu)
        {
            mobileMenuInitialized = false;
        }
        checkTask = null;
    }

    #endregion

    #region GameSpecific
    private string? GameUrl => GameService.Type.IsNotNull() ? TournamentList.NavigateMe(GameService.Type) : null;
    private bool CheckUrl()
    {
        return GameUrl.IsNotNull() && GameUrl != NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
    }
    #endregion

    private void Search(string args)
    {
        GameService.Search(args);
    }

    private void Login()
    {

    }
}
