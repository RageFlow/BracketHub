@inherits TournamentPage
@page "/games/{Type}/{TournamentId:int}"

<PageTitle>Tournament - @TournamentId</PageTitle>

<div class="page-background" style="@BackgroundUrlStyle"></div>

<div class="page-top-section" page-restrict="true">
	<div>
		<h2>@GameService.Tournament?.Name</h2>
	</div>
</div>

<div class="page-functions" page-restrict="true">
	<div class="page-function left">
		<button onClick="window.location.reload();" class="a-button" style="padding: 0 0.5rem;">
			<i class="fa-solid fa-arrows-rotate"></i>
		</button>
	</div>

	@if (GameService.Tournament?.Id != null && GameService.Tournament.Id > 0)
	{
		<div class="page-function">
			<a href="@EditTournament.NavigateMe(Type ?? "OTHER", GameService.Tournament.Id)" class="a-button" style="padding: 0 0.5rem;">
				<i class="fa-solid fa-pen-to-square"></i>
			</a>
		</div>
	}
</div>

<div class="tournament-page-content" page-restrict="true">

	<div class="tournament-data">

		<div class="tournament-info tournament-small">
			<span>Status</span>
			<span class="tournament-status @("status-" + GameService.Tournament?.Status)">@GameService.Tournament?.Status</span>
		</div>

		<div class="tournament-info tournament-small">
			<span>Date</span>
			<span>@GameService.Tournament?.Date?.ToString("MMM dd, yyyy")</span>
		</div>
		
		<div class="tournament-info tournament-signup">
			<button style="height: 32px;" @onclick="JoinTournament">Sign up</button>
		</div>

		<div class="tournament-info tournament-members">
			<span>Members</span>
			<span>@GameService.Tournament?.Members?.Count</span>
		</div>

		<div class="tournament-info tournament-description" style="grid-row: 2; grid-column: 1 / 4;">
			<p>
				@GameService.Tournament?.Description
			</p>
		</div>

		<div class="tournament-member-list">
			<div class="tournament-member-list-inner">
				@if (GameService.Tournament?.Members != null)
				{
					for (int i = 1; i <= GameService.Tournament.Members.Count; i++)
					{
						<a>
							<span>
								<i class="fa-brands fa-uber"></i>
								@GameService.Tournament.Members[i-1].Nickname
							</span>
							<span>@i</span>
						</a>
					}
				}
			</div>
		</div>

		@if (GameService.Tournament != null)
		{
			<BracketComponent Tournament="GameService.Tournament" />
		}
	</div>
</div>

@code {
	[CascadingParameter]
	public MainLayout? MainLayout { get; set; }

	public static string NavigateMe(string type, int? id) => $"games/{type}/{id?.ToString() ?? "Unknown"}";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender) // Jank but works without too much work
		{
			if (GameService.GameTask != null)
				await GameService.GameTask;

			if (GameService?.TournamentTask != null)
				await GameService.TournamentTask;

			StateHasChanged();
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task JoinTournament()
	{
		if (UserService.CurrentMember.IsNotNull())
		{
			if (GameService.Tournament.IsNotNull() && GameService.Tournament.Id.IsNotNull())
			{
				var link = new TournamentMemberLink()
				{
					MemberId = UserService.CurrentMember.Id,
					TournamentId = GameService.Tournament.Id.Value
				};

				if (await GameService.JoinTournament(link))
				{
					StateHasChanged();
				}
			}
		}
		else
		{
			MainLayout?.ToggleLogin(true);
		}
	}
}
