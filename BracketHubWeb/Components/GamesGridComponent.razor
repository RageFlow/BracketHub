
<div class="page-game-grid" page-restrict="true" style="@Style" restricted-size="@IsGamePage">
    <h3>@Title</h3>
    <div class="game-grid">
        @if (SortedGames != null)
        {
            foreach (var item in SortedGames)
            {
                <a href="@TournamentList.NavigateMe(item.Type)" class="game-item">
                    <img src="@GameModelStatics.CoverUrl(item.Type)" />
                    <span>@item.Name</span>
                </a>
            }
        }
        else
        {
            for (int i = 0; i < 3; i++)
            {
                <div class="game-item loading-object"></div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public string? Title { get; set; } = "Games";

    [Parameter]
    public List<GameModel>? Games { get; set; }

    [Parameter]
    public bool IsGamePage { get; set; }

    [Parameter]
    public string? Style { get; set; }

    private List<GameModel>? SortedGames { get; set; }

    protected override void OnInitialized()
    {
        SortedGames = Games;
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (SortedGames == null && Games != null)
        {
            SortedGames = Games;
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    public void SearchForValue(string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            SortedGames = Games;
        }
        else
        {
            SortedGames = Games?.Where(x => x.Name.IsNotNull() && x.Name.Contains(value, StringComparison.CurrentCultureIgnoreCase) ||
                x.Type.IsNotNull() && x.Type.Contains(value, StringComparison.CurrentCultureIgnoreCase) ||
                x.Description.IsNotNull() && x.Description.Contains(value, StringComparison.CurrentCultureIgnoreCase)).ToList();
        }
    }
}
