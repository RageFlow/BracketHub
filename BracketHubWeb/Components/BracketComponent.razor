
<div class="bracket-component" page-restrict="true" edit-enabled="@(AllowEditing ? "true" : "false")">
	@if (AllowEditing && GroupedMatches.IsNotNull())
	{
		<span>Click on a match to update its information.</span>
		<span>It is not necessary to save the tournament when making Match changes!</span>
	}
	<div class="bracket-component-view" id="tournament-bracket-@Tournament?.Id">
		@if (GroupedMatches.IsNotNull())
		{
			@foreach (var group in GroupedMatches)
			{
				var matches = group.ToList();

				<div class="bracket" round-number="@group.Key">
					<div class="bracket-header">
						<span>Round @group.Key</span>
					</div>
					<div class="bracket-list" round-offset="@(group.Key % 2)" round-number="@group.Key" style="--roundsize: @group.Key">
						@for (int i = 0; i < matches.Count; i++)
						{
							var match = matches[i];

							<div class="round-match" single-team="@(match.Members?.Count() <= 1)" match-winner="@match.Winner">

								@if (match.Members.IsNotNull())
								{
									foreach (var member in match.Members)
									{
										MemberModel model = GetMember(member);
										<a class="@(match.Winner == member ? "winner" : match.Winner != null ? "loser" : string.Empty) tournament-member tournament-@Tournament?.Id-@model.Id" member-id="@model.Id" @onclick="(() => MatchPlayerClicked(match))" onmouseover="highlightMember(@Tournament?.Id, @model.Id)" onmouseleave="unhighlightMember(@Tournament?.Id)">
											<span>@model.Name</span>
										</a>
									}
								}

								@if (matches.Count != 1)
								{
									<div class="exit @GetElevation(i + 1, i + 1 == matches.Count)" single-team="@(match.Members?.Count() <= 1)">
										<div class="entry @GetElevation(i+1, i+1 == matches.Count)"></div>
									</div>
								}

								@if (Debug)
								{
									<div style="z-index: 2; position: absolute; top: -10px; left: 0;">
										<span style="margin-right: 10px">@match.Id</span>
										<span>@match.MatchNumber</span>
									</div>
									<div style="z-index: 2; position: absolute; top: -10px; right: 0;">
										@if (match.ParentMatches.IsNotNull())
										{
											foreach (var item in match.ParentMatches)
											{
												<span style="margin-right: 10px">@item</span>
											}
										}
									</div>
								}
							</div>
						}
					</div>
				</div>
			}
		}
	</div>
</div>

@if (EditVisible)
{
	<div class="page-window-container">

		<div class="page-window-blocker" @onclick="HideMenu"></div>

		<div class="page-window-window">
			<button class="window-close" @onclick="HideMenu">
				<i class="fa-solid fa-x"></i>
			</button>

			<h4>Edit Match</h4>

			<div class="window-value">
				<label>
					Member 1
				</label>
				<InputSelect TValue="int?" @bind-Value="Member1">
					@if (Tournament?.Members != null)
					{
						foreach (MemberModel member in Tournament.Members)
						{
							<option checked="@(Member1 == member.Id)" value="@member.Id">
								@member.Name - @member.Id
							</option>
						}
					}
				</InputSelect>
			</div>

			@if (EditModel?.Members?.Length > 1)
			{
				<div class="window-value">
					<label>
						Member 2
					</label>
					<InputSelect TValue="int?" @bind-Value="Member2">
						@if (Tournament?.Members != null)
						{
							foreach (MemberModel member in Tournament.Members)
							{
								<option checked="@(Member2 == member.Id)" value="@member.Id">
									@member.Name - @member.Id
								</option>
							}
						}
					</InputSelect>
				</div>
			}

			<div class="window-value">
				<label>
					Winner
				</label>
				@if (EditModel.IsNotNull() && Member1.IsNotNull() && Member2.IsNotNull())
				{
					<InputSelect TValue="int?" @bind-Value="EditModel.Winner">
						<option checked="@(Member2 == null)" value="">
							None
						</option>
						@if (Tournament?.Members != null)
						{
							var mem1 = Tournament?.Members.FirstOrDefault(x => x.Id == Member1);
							var mem2 = Tournament?.Members.FirstOrDefault(x => x.Id == Member2);

							if (mem1.IsNotNull())
							{
								<option checked="@(Member1 == EditModel.Winner)" value="@Member1">
									@mem1?.Name - @mem1?.Id
								</option>
							}
							if (mem1.IsNotNull())
							{
								<option checked="@(Member2 == EditModel.Winner)" value="@Member2">
									@mem2?.Name - @mem2?.Id
								</option>
							}
						}
					</InputSelect>
				}
			</div>

			<button @onclick="UpdateMatch">
				Update
			</button>
		</div>

	</div>
}

@code {
	private bool Debug = false;

	private bool EditVisible { get; set; }

	[Parameter]
	public AdvancedTournamentModel? Tournament { get; set; }

	[Parameter]
	public bool AllowEditing { get; set; }

	public MatchModel? EditModel { get; set; }
	public int? Member1 { get; set; }
	public int? Member2 { get; set; }

	private List<MatchModel>? Matches { get; set; }

	private IEnumerable<IGrouping<int, MatchModel>>? GroupedMatches { get; set; }

	private Dictionary<int, MemberModel>? MemberList = new();


	private string GetElevation(int num, bool overrideCom = false)
	{
		return overrideCom ? "up" : num % 2 == 0 ? "up" : "down";
	}

	private MemberModel GetMember(int? id)
	{
		if (MemberList.IsNotNull() && id.IsNotNull() && MemberList.TryGetValue(id.Value, out MemberModel? value))
		{
			return value;
		}
		return new MemberModel((int)Team.TBD, Team.TBD.ToString(), Team.TBD.ToString());
	}

	protected override void OnInitialized()
	{
		if (Tournament.IsNotNull())
		{
			if (Tournament.Matches.IsNotNull())
			{
				Matches = Tournament.Matches;
				// Matches = new();
				// Matches.Add(new MatchModel()
				// {
				// 	Id = 1,
				// 	Status = Status.TBD,
				// 	Round = 1,
				// 	MatchNumber = 1,
				// 	Members = [200,400],
				// 	Winner = 1,
				// 	ChildMatch = null
				// });
			}

			MemberList = Tournament.Members?.ToDictionary(x => x.Id);

			// Will only execute internal if no matches are present
			FillExpectedMatches();
		}

		if (Matches.IsNotNull())
		{
			CheckNext(Matches, 1);

			GroupedMatches = Matches.Where(x => x.Round != null).OrderBy(x => x.MatchNumber).GroupBy(x => x.Round ?? -1);
		}

		base.OnInitialized();
	}

	private void FillExpectedMatches()
	{
		if (MemberList.IsNotNull() && MemberList.Count > 0)
		{
			Matches ??= new();

			int checkCount = MemberList.Count;
			// 1  2 & % 4 (Checking to fit correct amount of matches)
			while (checkCount % 8 != 0 && checkCount > 0 && checkCount != 2 && checkCount != 4)
				checkCount--;

			var highestCurrent = (Matches.Where(x => x.Round == 1).Select(x => x.MatchNumber).Max() ?? 0) * 2;

			MatchModel? currentMatch = null;
			int currentMatchId = highestCurrent+1;
			for (int i = highestCurrent; i < checkCount; i++)
			{
				if (!currentMatch.IsNotNull())
				{
					currentMatch = new MatchModel(null, Status.TBD, highestCurrent, currentMatchId, [0], null, null, null, Tournament?.Id);
					currentMatchId++;
				}
				else if(currentMatch.Members != null)
					currentMatch.Members = currentMatch.Members.Concat([0]).ToArray();

				if (i == MemberList.Count-1 || currentMatch.Members != null && currentMatch.Members.Length >= 2)
				{
					Matches.Add(currentMatch);
					currentMatch = null;
				}
			}
		}
	}

	private void CheckNext(List<MatchModel> matches, int round, int? maxNum = null)
	{
		var currentMatches = matches.Where(x => x.Round == round).OrderBy(x => x.MatchNumber).ToList();

		maxNum ??= currentMatches.Where(x => x.MatchNumber.IsNotNull()).Select(x => x.MatchNumber).Max();

		if (currentMatches.Count <= 1)
			return;

		int nextRound = round + 1;

		int matchNumber = maxNum ?? 0;
		int expectedMax = matchNumber;

		int? singleMatch = null;
		if (currentMatches.Count % 2 == 1)
		{
			expectedMax = matchNumber + (currentMatches.Count + 1) / 2;
			singleMatch = expectedMax;
		}
		else
		{
			expectedMax = matchNumber + currentMatches.Count / 2;
		}

		int currentChecked = 0;
		for (matchNumber += 1; matchNumber <= expectedMax; matchNumber++)
		{
			var nextMatch = matches.FirstOrDefault(x => x.MatchNumber == matchNumber);
			if (!nextMatch.IsNotNull())
			{
				var num1 = currentMatches.ElementAtOrDefault(currentChecked)?.Id;
				var num2 = currentMatches.ElementAtOrDefault(currentChecked + 1)?.Id;
				List<int> parents = new();
				if (num1 != null)
					parents.Add(num1.Value);
				if (num2 != null)
					parents.Add(num2.Value);

				// Set dummy match with TBD value for teams
				nextMatch ??= new MatchModel(null, Status.TBD, nextRound, matchNumber, singleMatch == matchNumber ? [0] : [0, 0], parents.ToArray(), null, null, Tournament?.Id);
				// Add dummy match (Based on invalid Id of 0)

				matches.Add(nextMatch);
			}
			currentChecked += 2;
		}

		matchNumber--;

		CheckNext(matches, nextRound, matchNumber);
	}

	public void HideMenu()
	{
		EditModel = null;
		Member1 = null;
		Member2 = null;
		EditVisible = false;
		StateHasChanged();
	}

	private void MatchPlayerClicked(MatchModel model)
	{
		if (AllowEditing)
		{
			EditModel = model;

			Member1 = EditModel.Members?.ElementAtOrDefault(0);
			Member2 = EditModel.Members?.ElementAtOrDefault(1);

			EditVisible = true;
			StateHasChanged();
		}
	}
	private async Task UpdateMatch()
	{
		if (EditModel.IsNotNull())
		{
			List<int> members = new();
			if (Member1 != null)
				members.Add(Member1.Value);
			if (Member2 != null)
				members.Add(Member2.Value);

			EditModel.Tournament ??= Tournament?.Id;

			EditModel.Members = members.ToArray();

			var updated = await GameService.PutMatch(EditModel);
			if (updated)
			{
				HideMenu();
			}
		}
	}
}
