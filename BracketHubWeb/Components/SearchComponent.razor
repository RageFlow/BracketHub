<div class="input-search-container" style="@Style" @onclick="Focus">
    @if (!ShowSearchButton)
    {
        <i class="fa-solid fa-magnifying-glass"></i>
    }
    <input type="search" placeholder="@Placeholder" value="@Value" @oninput="OnChange" @onkeydown="KeyPress" id="@guid" />
    <div class="input-clear">
        <button @onclick="Clear" @onclick:stopPropagation="true" style="@style"><i class="fa-solid fa-x"></i></button>
    </div>
    @if (ShowSearchButton)
    {
        <div class="input-submit">
            <button @onclick="Search">
                <i class="fa-solid fa-magnifying-glass"></i>
            </button>
        </div>
    }
</div>

@code {
    [Inject]
    protected IJSRuntime? JS { get; set; }

    [Parameter]
    public string? Placeholder { get; set; } = "Search";

    [Parameter]
    public string? Style { get; set; } = null;

    [Parameter]
    public bool ShowSearchButton { get; set; }

    [Parameter]
    public EventCallback<string> ValueEntered { get; set; }

    [Parameter]
    public EventCallback<string> ValueInput { get; set; }

    private Guid guid = Guid.NewGuid();

    private string? Value { get; set; }

    private string? style => isEmpty ? "display:none" : "";

    private bool isEmpty => string.IsNullOrEmpty(Value);

    private void Clear()
    {
        Value = string.Empty;
        if (ValueInput.IsNotNull())
            ValueInput.InvokeAsync(Value);
        StateHasChanged();
    }

    private void Focus()
    {
        if (JS.IsNotNull())
        {
            JS.InvokeVoidAsync("focus", guid);
        }
    }

    private void OnChange(ChangeEventArgs e)
    {
        Value = (string?)e.Value;
        if (ValueInput.IsNotNull())
            ValueInput.InvokeAsync(Value);
    }

    private void KeyPress(KeyboardEventArgs e)
    {
        if (isEmpty)
            return;

        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Search();
        }
    }

    private void Search()
    {
        ValueEntered.InvokeAsync(Value);
    }
}
